tasks:

- section:
    markdown: |
      Nakonec trošku delší projekt.
      Budeme na něm stavět dál; nedokončíš-li ho teď, budeš ho muset dodělat před příští sadou projektů.

      <blockquote>
      1-D piškvorky se hrají na řádku s dvaceti políčky.
      Hráči střídavě přidávají kolečka (`o`) a křížky (`x`),
      třeba:
      <pre>
      1. kolo: -------<span style='color: red'>x</span>------------
      2. kolo: -------x--<span style='color: red'>o</span>---------
      3. kolo: -------x<span style='color: red'>x</span>-o---------
      4. kolo: -------xx<span style='color: red'>o</span>o---------
      5. kolo: ------<span style='color: red'>x</span>xxoo---------
      </pre>
      Hráč, která dá tři své symboly vedle sebe, vyhrál.
      </blockquote>
      
- id: handout4_09
  mandatory: true
  markdown: |
    Napiš funkci `vyhodnot`, která dostane řetězec
    s herním polem 1-D piškvorek
    a vrátí jednoznakový řetězec podle stavu hry:

    - `"x"` – Vyhrál hráč s křížky (pole obsahuje `"xxx"`)
    - `"o"` – Vyhrál hráč s kolečky (pole obsahuje `"ooo"`)
    - `"!"` – Remíza (pole neobsahuje `"-"`, a nikdo nevyhrál)
    - `"-"` – Ani jedna ze situací výše (t.j. hra ještě neskončila)

  tests: 
    def test_x():
        assert vyhodnot("ooxxxoxooxxoxoxoxoox") == "x"
        assert vyhodnot("xxx---o----o-----o--") == "x"
        assert vyhodnot("------oxxx-o-----o--") == "x"
        assert vyhodnot("o-----o----o-----xxx") == "x"

    def test_o():
        assert vyhodnot("xxoxooxxoxxoxooxxooo") == "o"
        assert vyhodnot("ooo--x--------xx----") == "o"
        assert vyhodnot("-----xooo-----xx----") == "o"
        assert vyhodnot("-----x-----xx----ooo") == "o"

    def test_remiza():
        assert vyhodnot("oxoxoxoxxooxoxxooxox") == "!"
        assert vyhodnot("xxoxoxoxxooxoxxooxox") == "!"

    def test_zatim():
        assert vyhodnot("--------------------") == "-"
        assert vyhodnot("-----xx---oo--------") == "-"
        assert vyhodnot("--ox---o--x---o-----") == "-"
        assert vyhodnot("x--x--xox---oo----x-") == "-"



- id: handout4_10
  mandatory: true
  markdown: |
    Napiš funkci `tah`, která dostane řetězec s herním polem,
    číslo políčka (0-19), a symbol (`x` nebo `o`)
    a vrátí herní pole _(t.j. řetězec)_ s daným symbolem umístěným na danou pozici.

    Hlavička funkce by tedy měla vypadat nějak takhle:

    ```
    def tah(pole, cislo_policka, symbol):
        "Vrátí herní pole s daným symbolem umístěným na danou pozici"
        ...
    ```

    _Můžeš využít nějakou funkci, kterou jsme napsaly už na sraze?_
  tests: |  
    def test_delka():
        assert len(tah("--------------------", 2, "x")) == 20, \
        "Funkce tah() změnila délku řetězce, který představuje herní pole, to nemá dělat. Zkus to opravit."
        assert len(tah("ox-oxxooxoxoxxooxoxo", 2, "x")) == 20, \
        "Funkce tah() změnila délku řetězce, který představuje herní pole, to nemá dělat. Zkus to opravit."

    def test_0():
        assert tah("--------------------", 0, "o") == "o-------------------", \
        "Porovnej očekávaný řetězec s řetězcem, který vrátila funkce tah(). Zkus svou funkci tah() opravit."
        assert tah("-ox-oxxooxoxoxxooxox", 0, "o") == "oox-oxxooxoxoxxooxox", \
        "Porovnej očekávaný řetězec s řetězcem, který vrátila funkce tah(). Zkus svou funkci tah() opravit."

    def test_19():
        assert tah("--------------------", 19, "x") == "-------------------x", \
        "Porovnej očekávaný řetězec s řetězcem, který vrátila funkce tah(). Zkus svou funkci tah() opravit."
        assert tah("-ox-oxxooxoxoxxooxo-", 19, "x") == "-ox-oxxooxoxoxxooxox", \
        "Porovnej očekávaný řetězec s řetězcem, který vrátila funkce tah(). Zkus svou funkci tah() opravit."
    
- id: handout4_11
  markdown: |
    Napiš funkci `tah_hrace`, která dostane řetězec s herním polem,
    zeptá se hráče, na kterou pozici chce hrát, a vrátí herní pole
    se zaznamenaným tahem hráče.
    Funkce by měla odmítnout záporná nebo příliš velká čísla
    a tahy na obsazená políčka.
    Pokud uživatel zadá špatný vstup, funkce mu vynadá a zeptá se znova.
    
  tests: |
    def test_17():     #V minulém běhu, některé účastnice vynalozily úsilí, aby když hráč zadá "1" objevil se symbol na políčku 0. Co s tím?
        with mock.patch("builtins.input", return_value = 17):
            assert tah_hrace("--------------------") == "-----------------x--" or \
                   tah_hrace("--------------------") == "-----------------o--"
            assert tah_hrace("-oxoxoxo-oxxooxox--x") == "-oxoxoxo-oxxooxoxx-x" or \
                   tah_hrace("-oxoxoxo-oxxooxox--x") == "-oxoxoxo-oxxooxoxo-x"


    def test_19():
        with mock.patch("builtins.input", return_value = 19):
            assert tah_hrace("--------------------") == "-------------------x" or \
                   tah_hrace("--------------------") == "-------------------o"
            assert tah_hrace("-oxoxoxo-oxxooxox---") == "-oxoxoxo-oxxooxox--x" or \
                   tah_hrace("-oxoxoxo-oxxooxox---") == "-oxoxoxo-oxxooxox--o"

    def test_0():
        with mock.patch("builtins.input", return_value = 0):
            assert tah_hrace("--------------------") == "x-------------------" or \
                   tah_hrace("--------------------") == "o-------------------"
            assert tah_hrace("-xxoxoxo-oxxooxox--x") == "xxxoxoxo-oxxooxox--x" or \
                   tah_hrace("-ooxxoxo-oxxooxox--x") == "oooxxoxo-oxxooxox--x"
                   
     # Chybí testy toho, že funkce odmítá nevhodné vstupy a pak se ptá znova.

- id: handout4_12
  markdown: |
    Napiš funkci `tah_pocitace`, která dostane řetězec s herním polem,
    vybere pozici, na kterou hrát, a vrátí herní pole
    se zaznamenaným tahem počítače.

    Použij jednoduchou náhodnou „strategii”:

    1. Vyber číslo od 0 do 19.
    2. Pokud je dané políčko volné, hrej na něj.
    3. Pokud ne, opakuj od bodu 1.

    Hlavička funkce by tedy měla vypadat nějak takhle:

    ```
    def tah_pocitace(pole):
        "Vrátí herní pole se zaznamenaným tahem počítače"
        ...
    ```

- id: handout4_13
  markdown: |
    Napiš funkci `piskvorky1d`, která vytvoří řetězec s herním polem
    a střídavě volá funkce `tah_hrace` a `tah_pocitace`,
    dokud někdo nevyhraje nebo nedojde k remíze.

    Nezapomeň kontrolovat stav hry po každém tahu.

- section:
    markdown: |
      Poslední projekt je nepovinný, ale, jak to u podobných projektů bývá, můžeš na něj dostat zpětnou vazbu.
      Doporučuju toho využít!

- id: handout4_14
  markdown: |
    Zvládneš pro počítač naprogramovat lepší strategii?
    Třeba aby se snažil hrát vedle svých existujících symbolů
    nebo aby bránil protihráčovi?

    Stačí jen docela malé vylepšení!
